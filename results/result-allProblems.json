{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Optional call chain can be simplified",
  "severity": "High",
  "comment": "Can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports **Optional** call chains that can be simplified. Here are several examples of possible simplifications:\n\n* `optional.map(x -> true).orElse(false)` → `optional.isPresent()`\n* `optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)` → `optional.map(String::trim)`\n* `optional.map(x -> (String)x).orElse(null)` → `(String) optional.orElse(null)`\n* `Optional.ofNullable(optional.orElse(null))` → `optional`\n* `val = optional.orElse(null); val != null ? val : defaultExpr ` → `optional.orElse(defaultExpr)`\n* `val = optional.orElse(null); if(val != null) expr(val) ` → `optional.ifPresent(val -> expr(val))`\n\nNew in 2017.2",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/cn/techflower/authorization/service/PermissionService.java",
      "language": "JAVA",
      "line": 48,
      "offset": 35,
      "length": 9,
      "code": {
        "startLine": 46,
        "length": 9,
        "offset": 191,
        "surroundingCode": "    public Boolean isPermission(String username) {\n        Optional<PermissionDO> permissionDOOptional = permissionRepository.findFirstByUsername(username);\n        if (!permissionDOOptional.isPresent()) {\n            return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "cangjie-delivery.main",
    "inspectionName": "SimplifyOptionalCallChains"
  },
  "hash": "c8c7930b26219475d3f235c07bc135d64f082915c54c947ee0953e614442e9c3"
}]}
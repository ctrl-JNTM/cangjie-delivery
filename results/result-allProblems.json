{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Code",
  "type": "Non recommended 'field' injections",
  "severity": "Moderate",
  "comment": "Field injection is not recommended",
  "detailsInfo": "Reports injected or autowired fields in Spring components.\n\nThe quick-fix suggests the recommended constructor-based dependency injection in beans\nand assertions for mandatory fields.\n\n**Example:**\n\n\n    class MyComponent {\n      @Inject MyCollaborator collaborator; // injected field\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // throws NullPointerException\n      }\n    }\n\n<br />\n\nAfter applying the quick-fix:\n\n\n    class MyComponent {\n\n      private final MyCollaborator collaborator;\n\n      @Inject\n      public MyComponent(MyCollaborator collaborator) {\n        Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n        this.collaborator = collaborator;\n      }\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // now this call is safe\n      }\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/cn/techflower/foundation/service/PermissionService.java",
      "language": "JAVA",
      "line": 36,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 34,
        "length": 10,
        "offset": 82,
        "surroundingCode": "    @Autowired\n    private PermissionRoleRepository permissionRoleRepository;\n    @Autowired\n    PasswordEncoder passwordEncoder;\n"
      }
    }
  ],
  "attributes": {
    "module": "cangjie-delivery.main",
    "inspectionName": "SpringJavaAutowiredFieldsWarningInspection"
  },
  "hash": "6b7b31c16c2692aa3c4ae7593a5a19e56862d5b59b42e2d5151097a803f2adc2"
},{
  "tool": "Code Inspection",
  "category": "Code",
  "type": "Non recommended 'field' injections",
  "severity": "Moderate",
  "comment": "Field injection is not recommended",
  "detailsInfo": "Reports injected or autowired fields in Spring components.\n\nThe quick-fix suggests the recommended constructor-based dependency injection in beans\nand assertions for mandatory fields.\n\n**Example:**\n\n\n    class MyComponent {\n      @Inject MyCollaborator collaborator; // injected field\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // throws NullPointerException\n      }\n    }\n\n<br />\n\nAfter applying the quick-fix:\n\n\n    class MyComponent {\n\n      private final MyCollaborator collaborator;\n\n      @Inject\n      public MyComponent(MyCollaborator collaborator) {\n        Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n        this.collaborator = collaborator;\n      }\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // now this call is safe\n      }\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/cn/techflower/foundation/service/PermissionService.java",
      "language": "JAVA",
      "line": 32,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 30,
        "length": 10,
        "offset": 74,
        "surroundingCode": "    @Autowired\n    private PermissionRepository permissionRepository;\n    @Autowired\n    private RoleRepository roleRepository;\n    @Autowired"
      }
    }
  ],
  "attributes": {
    "module": "cangjie-delivery.main",
    "inspectionName": "SpringJavaAutowiredFieldsWarningInspection"
  },
  "hash": "1a72df4137e1ed444294af511d0ec18ce4d90db74ed3cd323d0891e46a297cab"
},{
  "tool": "Code Inspection",
  "category": "Code",
  "type": "Non recommended 'field' injections",
  "severity": "Moderate",
  "comment": "Field injection is not recommended",
  "detailsInfo": "Reports injected or autowired fields in Spring components.\n\nThe quick-fix suggests the recommended constructor-based dependency injection in beans\nand assertions for mandatory fields.\n\n**Example:**\n\n\n    class MyComponent {\n      @Inject MyCollaborator collaborator; // injected field\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // throws NullPointerException\n      }\n    }\n\n<br />\n\nAfter applying the quick-fix:\n\n\n    class MyComponent {\n\n      private final MyCollaborator collaborator;\n\n      @Inject\n      public MyComponent(MyCollaborator collaborator) {\n        Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n        this.collaborator = collaborator;\n      }\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // now this call is safe\n      }\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/cn/techflower/foundation/service/PermissionService.java",
      "language": "JAVA",
      "line": 34,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 32,
        "length": 10,
        "offset": 62,
        "surroundingCode": "    @Autowired\n    private RoleRepository roleRepository;\n    @Autowired\n    private PermissionRoleRepository permissionRoleRepository;\n    @Autowired"
      }
    }
  ],
  "attributes": {
    "module": "cangjie-delivery.main",
    "inspectionName": "SpringJavaAutowiredFieldsWarningInspection"
  },
  "hash": "05b663fdf35d358037138497e255e0caf1022702e8e16ca96fadabd349958709"
},{
  "tool": "Code Inspection",
  "category": "Code",
  "type": "Non recommended 'field' injections",
  "severity": "Moderate",
  "comment": "Field injection is not recommended",
  "detailsInfo": "Reports injected or autowired fields in Spring components.\n\nThe quick-fix suggests the recommended constructor-based dependency injection in beans\nand assertions for mandatory fields.\n\n**Example:**\n\n\n    class MyComponent {\n      @Inject MyCollaborator collaborator; // injected field\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // throws NullPointerException\n      }\n    }\n\n<br />\n\nAfter applying the quick-fix:\n\n\n    class MyComponent {\n\n      private final MyCollaborator collaborator;\n\n      @Inject\n      public MyComponent(MyCollaborator collaborator) {\n        Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n        this.collaborator = collaborator;\n      }\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // now this call is safe\n      }\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/cn/techflower/foundation/service/PermissionService.java",
      "language": "JAVA",
      "line": 30,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 28,
        "length": 10,
        "offset": 74,
        "surroundingCode": "@Slf4j\npublic class PermissionService implements UserDetailsService {\n    @Autowired\n    private PermissionRepository permissionRepository;\n    @Autowired"
      }
    }
  ],
  "attributes": {
    "module": "cangjie-delivery.main",
    "inspectionName": "SpringJavaAutowiredFieldsWarningInspection"
  },
  "hash": "795c615f8cce22b736485aa62891ed0334ebc8b55b76ca0a06a9922fcaee07b7"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Optional call chain can be simplified",
  "severity": "High",
  "comment": "Can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports **Optional** call chains that can be simplified. Here are several examples of possible simplifications:\n\n* `optional.map(x -> true).orElse(false)` → `optional.isPresent()`\n* `optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)` → `optional.map(String::trim)`\n* `optional.map(x -> (String)x).orElse(null)` → `(String) optional.orElse(null)`\n* `Optional.ofNullable(optional.orElse(null))` → `optional`\n* `val = optional.orElse(null); val != null ? val : defaultExpr ` → `optional.orElse(defaultExpr)`\n* `val = optional.orElse(null); if(val != null) expr(val) ` → `optional.ifPresent(val -> expr(val))`\n\nNew in 2017.2",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/cn/techflower/foundation/service/PermissionService.java",
      "language": "JAVA",
      "line": 51,
      "offset": 35,
      "length": 9,
      "code": {
        "startLine": 49,
        "length": 9,
        "offset": 191,
        "surroundingCode": "    public Boolean isPermission(String username) {\n        Optional<PermissionDO> permissionDOOptional = permissionRepository.findFirstByUsername(username);\n        if (!permissionDOOptional.isPresent()) {\n            return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "cangjie-delivery.main",
    "inspectionName": "SimplifyOptionalCallChains"
  },
  "hash": "6fdc7be1aa626e3f61d180c00fbc70fa7f3e8db10c976fc5d2319138a54663a5"
}]}